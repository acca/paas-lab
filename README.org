#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Fog and Cloud Computing 2019 - PaaS Lab
#+DATE: <2019-05-30 Thu>
#+AUTHOR: Daniele Santoro
#+EMAIL: dsantoro@fbk.eu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.5)
* PaaS_L01_20190531
** Docker install
*** Upgrade your Lab Virtual Machine
    Update packages
    #+BEGIN_SRC sh
    DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy update
    #+END_SRC

    Upgrade packages
    #+BEGIN_SRC sh
    DEBIAN_FRONTEND=noninteractive sudo apt-get dist-upgrade -y
    #+END_SRC

*** Install additional packages
    Required are already installed, install other if you like
    #+BEGIN_SRC sh
    apt-get install PACKAGE_NAME
    #+END_SRC

*** Install Docker on your Lab Virtual Machine

    Install Docker
    #+BEGIN_SRC sh
    sudo apt-get install docker.io -y
    #+END_SRC

    Enable ubuntu user to use Docker
    #+BEGIN_SRC sh
    sudo usermod -aG docker ubuntu
    #+END_SRC

    Logout & Login again

*** Test Docker installation
    #+BEGIN_SRC sh
    docker ps
    #+END_SRC
** Exercise 4 â€“ Build a custom Docker image
      1) Start an ubuntu based image
	 #+BEGIN_SRC
	 docker run -it ubuntu
	 #+END_SRC
      2) Install a package
	 #+BEGIN_SRC sh
	   apt-get update
	   apt-get install figlet
	   exit
	 #+END_SRC
      3) Show differences from the base image
	 #+BEGIN_SRC sh
	 docker diff <containerID>
	 #+END_SRC
      4) Commit changes creating a new layer and the respective image. The output is the new image ID (=newImageID=)
	 #+BEGIN_SRC sh
	 docker commit <containerID>
	 #+END_SRC
      5) Start a new container from that image
	 #+BEGIN_SRC sh
	 docker run -it <newImageID>
	 #+END_SRC
      6) Give a name to the image
	 #+BEGIN_SRC sh
	 docker tag <newImageID> figlet
	 #+END_SRC
	 Or specify the tag as an extra argument of the commit
	 #+BEGIN_SRC sh
	 docker commit <containerID> figlet
	 #+END_SRC
      7) Start a container based on that image using name
	 #+BEGIN_SRC sh
	 docker run -it figlet
	 #+END_SRC
** Kind install
*** Install Kind

    As user =ubunut= cd into your $HOME
    #+BEGIN_SRC sh
    su ubuntu
    cd /home/ubuntu
    #+END_SRC

    Download =kind= binary
    #+BEGIN_SRC sh
    wget https://github.com/kubernetes-sigs/kind/releases/download/v0.3.0/kind-linux-amd64
    #+END_SRC

    Move the =kind= binary into your $PATH and make it available on your server
    #+BEGIN_SRC sh
    sudo mv kind-linux-amd64 /usr/local/bin/kind
    #+END_SRC

    Add permission for execution of =kind= binary
    #+BEGIN_SRC sh
    sudo chmod a+x /usr/local/bin/kind
    #+END_SRC

    Check that =kind= is working on your server
    #+BEGIN_SRC sh
    kind --help
    #+END_SRC

*** Downlaod and setup kubectl
    Downlaod the =kubectl= binary
    #+BEGIN_SRC sh
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    #+END_SRC

    Make the kubectl binary executable
    #+BEGIN_SRC sh
    chmod +x ./kubectl
    #+END_SRC

    Move the binary in to your PATH.
    #+BEGIN_SRC sh
    sudo mv ./kubectl /usr/local/bin/kubectl
    #+END_SRC

    Test to ensure the version you installed is working fine
    #+BEGIN_SRC sh
    kubectl version
    #+END_SRC

*** Install kubectl completion
    #+BEGIN_SRC sh
    kubectl completion bash >> ~/.bashrc
    source $HOME/.bashrc
    #+END_SRC

*** Install a single node Kuberntes cluster
    Using =kind= is as simple as...
    #+BEGIN_SRC sh
    kind create cluster
    #+END_SRC

    Connect the =kubectl= to your new cluster
    #+BEGIN_SRC sh
    export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"
    #+END_SRC

    Ensure cluster is up and running
    #+BEGIN_SRC sh
    kubectl cluster-info
    #+END_SRC

    Quick look at the nodes
    #+BEGIN_SRC sh
    kubectl get nodes
    #+END_SRC

    Quick look at the workload
    #+BEGIN_SRC sh
    kubectl get pod
    #+END_SRC

    Start some workload using =nginx= webserver? docker hello world ?
    #+BEGIN_SRC sh
    kubectl run --image=nginx nginx
    #+END_SRC

    Quick look at the workload now
    #+BEGIN_SRC sh
    kubectl get pod
    #+END_SRC


    Check (in-cluster) that nginx is working fine
* PaaS_L02_20190607
** Create a multi-node k8s cluster
   Remove the single node cluster to save resources
   #+BEGIN_SRC sh
   kind delete cluster --name kind
   #+END_SRC

   Download multi-node cluster configuration
   #+BEGIN_SRC sh
   BRANCH=master
   wget https://raw.githubusercontent.com/acca/paas-lab/$MASTER/kind-multi-node.yaml
   #+END_SRC

   Create a new multi-node cluster with =kind=
   #+BEGIN_SRC sh
   kind create cluster --config kind-multi-node.yaml --name kind-mn
   #+END_SRC

   Connect the =kubectl= to your new cluster
   #+BEGIN_SRC sh
   export KUBECONFIG="$(kind get kubeconfig-path --name="kind-mn")"
   #+END_SRC

   Ensure cluster is up and running
   #+BEGIN_SRC sh
   kubectl cluster-info
   #+END_SRC

   Quick look at the nodes
   #+BEGIN_SRC sh
   kubectl get nodes
   #+END_SRC
